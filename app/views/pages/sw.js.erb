var OFFLINE_PAGE = '<%= @offline_page.html_safe %>';

var CACHE_VERSION = '<%= DateTime.now.strftime("%Y%m%d") %>';
var CURRENT_CACHES = {
  prefetch: 'schedule-cache-v' + CACHE_VERSION
};

var urlsToPrefetch = [
  '<%= asset_path 'application', type: :stylesheet %>',
  '<%= asset_path 'application', type: :javascript %>',
  OFFLINE_PAGE
];

var urlsToProxy = [
  '<%= asset_path 'application', type: :stylesheet %>',
  '<%= asset_path 'application', type: :javascript %>',
  '/',
  OFFLINE_PAGE
];

self.addEventListener('install', function (event) {
  var now = Date.now();
  //console.log('Handling install event. Resources to prefetch:', urlsToPrefetch);
  event.waitUntil(
      caches.open(CURRENT_CACHES.prefetch).then(function (cache) {
        var cachePromises = urlsToPrefetch.map(function (urlToPrefetch) {
          var url = new URL(urlToPrefetch, location.href);

          url.search += (url.search ? '&' : '?') + 'cache-bust=' + now;

          var request = new Request(url, {mode: 'no-cors'});
          return fetch(request).then(function (response) {
            if (response.status >= 400) {
              throw new Error('request for ' + urlToPrefetch +
                  ' failed with status ' + response.statusText);
            }

            return cache.put(urlToPrefetch, response);
          }).catch(function (error) {
            console.error('Not caching ' + urlToPrefetch + ' due to ' + error);
          });
        });

        return Promise.all(cachePromises).then(function () {
          //console.log('Pre-fetching complete.');
        });
      }).catch(function (error) {
        console.error('Pre-fetching failed:', error);
      })
  );
  self.skipWaiting();
});

self.addEventListener('activate', function (event) {
  // Delete all caches that aren't named in CURRENT_CACHES.
  // While there is only one cache in this example, the same logic will handle the case where
  // there are multiple versioned caches.
  var expectedCacheNames = Object.keys(CURRENT_CACHES).map(function (key) {
    return CURRENT_CACHES[key];
  });

  event.waitUntil(
      caches.keys().then(function (cacheNames) {
        return Promise.all(
            cacheNames.map(function (cacheName) {
              if (expectedCacheNames.indexOf(cacheName) === -1) {
                // If this cache name isn't present in the array of "expected" cache names, then delete it.
                console.log('Deleting out of date cache:', cacheName);
                return caches.delete(cacheName);
              }
            })
        );
      })
  );
});

/*
self.addEventListener('fetch', function (event) {
  console.log('Handling fetch event for', event.request.url);

  if (event.request.url instanceof urlsToProxy) {
    console.log('True', event.request.url);
    event.respondWith(
        // caches.match() will look for a cache entry in all of the caches available to the service worker.
        // It's an alternative to first opening a specific named cache and then matching on that.
        caches.match(event.request).then(function (response) {
          if (response) {
            console.log('Found response in cache:', response);

            return response;
          }

          console.log('No response found in cache. About to fetch from network...');

          // event.request will always have the proper mode set ('cors, 'no-cors', etc.) so we don't
          // have to hardcode 'no-cors' like we do when fetch()ing in the install handler.
          return fetch(event.request).then(function (response) {
            console.log('Response from network is:', response);

            return response;
          }).catch(function (error) {
            // This catch() will handle exceptions thrown from the fetch() operation.
            // Note that a HTTP error response (e.g. 404) will NOT trigger an exception.
            // It will return a normal response object that has the appropriate error code set.
            console.log('Fetching failed:', error);
            return caches.match(OFFLINE_PAGE)
          });
        })
    );
  } else {console.log('False', event.request.url);}
});*/
